name: Deploy Nuxt App to Azure

on:
  pull_request:
    types: [opened, synchronize, closed]
    branches: [main]
  push:
    branches: [main]

env:
  NODE_VERSION: 22.x
  AZURE_WEBAPP_NAME: ${{ vars.AZURE_WEBAPP_NAME }}
  AZURE_RESOURCE_GROUP: ${{ vars.AZURE_RESOURCE_GROUP }}
  AZURE_WEBAPP_STAGING_SLOT: staging
  AZURE_WEBAPP_PROD_SLOT: production
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

permissions:
  id-token: write
  contents: read

jobs:
  build:
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest
    name: Build Nuxt App
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Build app
        run: npm run build
      
      - name: Check .output exists
        run: |
          if [ ! -d ".output" ]; then
              ls -la
            echo ".output directory not found!"
            exit 1
          fi

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-build
          path: .output
          if-no-files-found: error
          include-hidden-files: true

  create-or-delete-slot:
    if: always()
    runs-on: ubuntu-latest
    environment:
      name: staging
    needs: build
    steps:
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}
      - name: Set slot name
        id: slot
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "slot=staging-pr-${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          else
            echo "slot=staging" >> $GITHUB_OUTPUT
          fi
      - name: Create or Delete Slot
        run: |
          SLOT="${{ steps.slot.outputs.slot }}"
          RG="${{ env.AZURE_RESOURCE_GROUP }}"
          APP="${{ env.AZURE_WEBAPP_NAME }}"

          if [ "${{ github.event.action }}" = "closed" ]; then
            echo "Deleting slot $SLOT"
            az webapp deployment slot delete --resource-group "$RG" --name "$APP" --slot "$SLOT" || echo "Slot may not exist; continuing"
          else
            echo "Ensuring slot $SLOT exists"
            az webapp deployment slot list --resource-group "$RG" --name "$APP" | grep -q "\"name\": \"$SLOT\"" \
              || az webapp deployment slot create --resource-group "$RG" --name "$APP" --slot "$SLOT"
          fi

  deploy-staging-pr:
    if: github.event.action != 'closed' && github.event_name == 'pull_request'
    needs: [build, create-or-delete-slot]
    runs-on: ubuntu-latest
    environment:
      name: staging
    steps:
      - uses: actions/checkout@v4
      - name: Download build artifact
        uses: actions/download-artifact@v5
        with:
          name: app-build
          path: ~/.output
      - name: Display structure of downloaded files
        run: |
          pwd
          ls -al
      - name: Set slot name
        id: slot
        run: echo "slot=staging-pr-${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}
      - name: Deploy to Azure Web App (PR Staging Slot)
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          slot-name: ${{ steps.slot.outputs.slot }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: .output

  deploy-staging-main:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [build, create-or-delete-slot]
    runs-on: ubuntu-latest
    environment:
      name: staging
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v5
        with:
          name: app-build
          path: .output
      - name: Display structure of downloaded files
        run: |
          pwd
          ls -al
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}
      - name: Deploy to Azure Web App (Main Staging Slot)
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          slot-name: ${{ env.AZURE_WEBAPP_STAGING_SLOT }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: .output

  deploy-production:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: deploy-staging-main
    runs-on: ubuntu-latest
    environment:
      name: production
    steps:
      - uses: actions/checkout@v4
      - name: Download build artifact
        uses: actions/download-artifact@v5
        with:
          name: app-build
      - name: Display structure of downloaded files
        run: |
          pwd
          ls -al
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}
      - name: Deploy to Azure Web App (Production)
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          slot-name: ${{ env.AZURE_WEBAPP_PROD_SLOT }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_PROD }}
          package: .output